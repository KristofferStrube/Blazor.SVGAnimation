@page "/Loading"
@inject ISVGAnimationService SVGAnimationService;

<PageTitle>Blazor.SVGAnimation - Loading Animation</PageTitle>
<p>We can <code>begin</code> an animation,have it run <code>indefinite</code>, and <code>end</code> it at a full cycle to have a nice stop</p>

<button class="btn btn-success" @onclick="StartAnimation">Start Loading Animation</button>
<button class="btn btn-warning" @onclick="EndAnimation">End Loading Animation</button>
<br />

<svg width="100px" height="100px">
    <g transform="rotate(45 50 50)">
        <circle r="25"
                cx="50"
                cy="50"
                stroke-width="10"
                stroke="grey"
                fill="white"></circle>
        <rect x="51" y="20" width="29" height="30" fill="white"></rect>
        <path fill="grey" d="M 50 10 l 15 15 -15 15 z"></path>
        <animateTransform @ref="arrowAnimateElement"
                          attributeName="transform"
                          type="rotate"
                          begin="indefinite"
                          repeatCount="indefinite"
                          dur="@(animationTime.ToString(CultureInfo.InvariantCulture))s"
                          from="45 50 50"
                          to="405 50 50" />
    </g>
</svg>

@code {
    protected ElementReference arrowAnimateElement { get; set; }
    protected SVGAnimationElement arrowAnimation;
    protected AnimationStatus Status = AnimationStatus.Still;
    protected float animationTime = 1f;
    protected float startTime = 0;

    protected override async Task OnAfterRenderAsync(bool firstRender)
    {
        if (firstRender)
        {
            arrowAnimation = await SVGAnimationService.GreateSVGAnimationElement(arrowAnimateElement);

            await arrowAnimation.SubscribeToBeginAsync(() => Status = AnimationStatus.Running);
            await arrowAnimation.SubscribeToEndAsync(() => Status = AnimationStatus.Still);
        }
    }

    private async void StartAnimation()
    {
        if (Status is not AnimationStatus.Still)
        {
            return;
        }
        startTime = await arrowAnimation.GetCurrentTimeAsync();
        await arrowAnimation.BeginElementAsync();
    }

    private async void EndAnimation()
    {
        if (Status is not AnimationStatus.Running)
        {
            return;
        }
        Status = AnimationStatus.Stopping;
        var timeInPeriod = (await arrowAnimation.GetCurrentTimeAsync() - startTime) % animationTime;
        await arrowAnimation.EndElementAtAsync(1 - timeInPeriod);
    }

    protected enum AnimationStatus
    {
        Still,
        Running,
        Stopping
    }
}